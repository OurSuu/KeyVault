require('dotenv').config();

const express = require('express');
const app = express();  // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ app.post

// === ‡πÉ‡∏ä‡πâ Brevo (Sendinblue) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• ===
// const nodemailer = require('nodemailer');   // ‚Üê ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å (‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå)
const SibApiV3Sdk = require('@sendinblue/client');

// --- ‚òÖ‚òÖ‚òÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Brevo Key (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ‚òÖ‚òÖ‚òÖ ---
// 1. ‡∏£‡∏±‡∏ö Client instance ‡∏´‡∏•‡∏±‡∏Å
const defaultClient = SibApiV3Sdk.ApiClient.instance;

// 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Key ‡∏ö‡∏ô Client instance ‡∏ô‡∏±‡πâ‡∏ô
const apiKey = defaultClient.authentications['api-key']; // (‡πÉ‡∏ä‡πâ 'api-key' ‡∏Ç‡∏µ‡∏î‡∏Å‡∏•‡∏≤‡∏á ‡∏ñ‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
apiKey.apiKey = process.env.BREVO_API_KEY;
// --- ‚òÖ‚òÖ‚òÖ ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚òÖ‚òÖ‚òÖ ---

// 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á apiInstance (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏î‡∏∂‡∏á Key ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏á)
const apiInstance = new SibApiV3Sdk.TransactionalEmailsApi();

// --------- ‚òÖ‚òÖ‚òÖ DATABASE: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å sqlite3 ‡πÄ‡∏õ‡πá‡∏ô postgresql (pg) ‚òÖ‚òÖ‚òÖ -----------
const { Pool } = require('pg'); // ‚òÖ‚òÖ‚òÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‚òÖ‚òÖ‚òÖ
const bcrypt = require('bcryptjs');
const cors = require('cors');
const path = require('path');
const rateLimit = require('express-rate-limit');
const jwt = require('jsonwebtoken'); // ‚òÖ‚òÖ‚òÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° jwt ‚òÖ‚òÖ‚òÖ

const PORT = process.env.PORT || 3000;

// === ‡∏Å‡∏≥‡∏´‡∏ô‡∏î email ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö ===
// ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á" ‡πÉ‡∏ô Brevo
const MAIN_EMAIL = process.env.EMAIL_USER || "dognew480@gmail.com";
const SENDER_EMAIL = process.env.BREVO_SENDER || "contact@yourdomain.com"; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ sender ‡∏≠‡∏µ‡πÄ‡∏°‡∏•

// ‚òÖ‚òÖ‚òÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á "Pool" ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå ‚òÖ‚òÖ‚òÖ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
pool.connect((err, client, release) => {
  if (err) {
    return console.error('Error acquiring client', err.stack);
  }
  console.log('Connected to PostgreSQL database!');
  client.release();
});

// ‚òÖ‚òÖ‚òÖ initializeDatabase(); // --> Comment ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡∏≠‡∏≠‡∏Å (‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ schema.sql ‡πÅ‡∏ó‡∏ô) ‚òÖ‚òÖ‚òÖ

// ====== Middleware (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å route) ======
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// === OTP/Email Routes: Improved OtpManager Usage ===

class OtpManager {
  constructor() {
    this.otpStore = new Map();
    this.otpCooldown = new Map();
    this.cleanupInterval = setInterval(() => this.cleanup(), 5 * 60 * 1000); // cleanup every 5 min
  }

  generateOtp(email) {
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    this.otpStore.set(email, {
      otp,
      expire: Date.now() + 5 * 60 * 1000, // 5 mins
      attempts: 0
    });
    return otp;
  }

  verifyOtp(email, otp) {
    const record = this.otpStore.get(email);
    if (!record) return { valid: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ OTP ‡∏ô‡∏µ‡πâ" };

    if (record.expire < Date.now()) {
      this.otpStore.delete(email);
      return { valid: false, error: "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß" };
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á
    record.attempts++;
    if (record.attempts > 5) {
      this.otpStore.delete(email);
      return { valid: false, error: "‡∏•‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î" };
    }

    if (record.otp !== otp) {
      return { valid: false, error: "‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
    }

    this.otpStore.delete(email);
    return { valid: true };
  }

  setCooldown(email) {
    this.otpCooldown.set(email, Date.now());
  }

  checkCooldown(email) {
    const lastRequest = this.otpCooldown.get(email);
    if (!lastRequest) return { cooldown: false };

    const now = Date.now();
    if (now - lastRequest < 60000) {
      return {
        cooldown: true,
        remaining: Math.ceil((60000 - (now - lastRequest)) / 1000)
      };
    }
    this.otpCooldown.delete(email);
    return { cooldown: false };
  }

  cleanup() {
    const now = Date.now();
    // Remove expired otps
    for (const [email, record] of this.otpStore.entries()) {
      if (record.expire < now) {
        this.otpStore.delete(email);
      }
    }
    // Remove expired cooldowns
    for (const [email, timestamp] of this.otpCooldown.entries()) {
      if (now - timestamp >= 60000) {
        this.otpCooldown.delete(email);
      }
    }
  }
}

const otpManager = new OtpManager();

// === ‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (with cooldown & prettier email) ‡∏î‡πâ‡∏ß‡∏¢ otpManager ===
app.post("/api/auth/send-otp", async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: "Missing email" });

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
  const cooldown = otpManager.checkCooldown(email);
  if (cooldown.cooldown) {
    return res.status(429).json({
      error: `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ${cooldown.remaining} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠ OTP ‡πÉ‡∏´‡∏°‡πà`,
      cooldown: cooldown.remaining
    });
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cooldown
  otpManager.setCooldown(email);
  const otp = otpManager.generateOtp(email);

  // --- ‚òÖ‚òÖ‚òÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Brevo) ‚òÖ‚òÖ‚òÖ ---
  const sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();
  sendSmtpEmail.to = [{ email: email }];
  sendSmtpEmail.sender = { name: "KeyVault", email: MAIN_EMAIL }; // ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
  sendSmtpEmail.subject = "üîê KeyVault - Email Verification Code";
  sendSmtpEmail.htmlContent = `
    <div style="font-family:Arial;padding:16px;max-width:500px;margin:0 auto;background:#f8fafc;border-radius:8px;border:1px solid #e2e8f0;">
      <div style="background:linear-gradient(90deg,#6366f1,#8b5cf6);padding:20px;border-radius:8px 8px 0 0;text-align:center;">
        <h1 style="color:white;margin:0;font-size:24px;">üîê KeyVault</h1>
      </div>
      <div style="padding:20px;">
        <h2 style="color:#1e293b;margin-top:0;">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
        <p style="color:#475569;font-size:16px;line-height:1.5;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ KeyVault:</p>
        <div style="background:#f1f5f9;border:2px dashed #cbd5e1;border-radius:8px;padding:15px;text-align:center;margin:20px 0;">
          <div style="font-size:32px;font-weight:bold;letter-spacing:8px;color:#1e293b;">${otp}</div>
        </div>
        <p style="color:#64748b;font-size:14px;text-align:center;">
          ‚ö†Ô∏è ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ<br>
          ‚ùå ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ
        </p>
      </div>
      <div style="background:#f1f5f9;padding:15px;border-radius:0 0 8px 8px;text-align:center;border-top:1px solid #e2e8f0;">
        <p style="color:#64748b;font-size:12px;margin:0;">
          ¬© ${new Date().getFullYear()} KeyVault. All rights reserved.
        </p>
      </div>
    </div>
  `;
  // --- ‚òÖ‚òÖ‚òÖ ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Brevo) ‚òÖ‚òÖ‚òÖ ---

  try {
    // --- ‚òÖ‚òÖ‚òÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢ Brevo API ‚òÖ‚òÖ‚òÖ ---
    await apiInstance.sendTransacEmail(sendSmtpEmail);

    res.json({
      success: true,
      message: "‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß",
      cooldown: 60
    });
  } catch (err) {
    // (‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡πÅ‡∏•‡∏∞ Cooldown ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    otpManager.otpCooldown.delete(email);
    console.error("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res.status(500).json({ error: "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown OTP
app.get("/api/auth/cooldown/:email", (req, res) => {
  const { email } = req.params;
  const cooldown = otpManager.checkCooldown(email);
  if (cooldown.cooldown) {
    return res.json({
      cooldown: true,
      remaining: cooldown.remaining
    });
  }
  res.json({ cooldown: false });
});

// === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ otpManager) ===
app.post("/api/auth/verify-otp", (req, res) => {
  const { email, otp } = req.body;
  const result = otpManager.verifyOtp(email, otp);

  if (!result.valid) {
    return res.status(400).json({ error: result.error });
  }

  return res.json({ success: true });
});

// === Forgot Password === (‡πÉ‡∏ä‡πâ Brevo ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
app.post("/api/auth/forgot-password", async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: "Missing email" });

  try {
    const userResult = await pool.query("SELECT id, email FROM users WHERE email = $1", [email]);
    const user = userResult.rows[0];
    if (!user) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset (random)
    const resetToken = Math.random().toString(36).substring(2, 10);
    const expire = Date.now() + 1000 * 60 * 15; // 15 ‡∏ô‡∏≤‡∏ó‡∏µ

    if (!global.resetTokens) global.resetTokens = new Map();
    global.resetTokens.set(resetToken, { email, expire });

    // üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    const resetLink = `http://localhost:${PORT}/reset-password.htm?token=${resetToken}`;

    // --- ‚òÖ‚òÖ‚òÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Brevo) ‚òÖ‚òÖ‚òÖ ---
    const sendSmtpEmail = new SibApiV3Sdk.SendSmtpEmail();
    sendSmtpEmail.to = [{ email: email }];
    sendSmtpEmail.sender = { name: "KeyVault Support", email: MAIN_EMAIL };
    sendSmtpEmail.subject = "üîê Reset your KeyVault password";
    sendSmtpEmail.htmlContent = `
      <div style="font-family:Arial;padding:16px;max-width:500px;margin:0 auto;background:#f8fafc;border-radius:8px;border:1px solid #e2e8f0;">
        <h2 style="color:#1e293b;">Reset Your Password</h2>
        <p style="color:#475569;">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)</p>
        <a href="${resetLink}" style="display:inline-block;margin:15px 0;padding:12px 20px;background:#3b82f6;color:white;border-radius:6px;text-decoration:none;">Reset Password</a>
        <p style="font-size:12px;color:#64748b;">‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ</p>
      </div>
    `;
    // --- ‚òÖ‚òÖ‚òÖ ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Brevo) ‚òÖ‚òÖ‚òÖ ---

    try {
      // --- ‚òÖ‚òÖ‚òÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢ Brevo API ‚òÖ‚òÖ‚òÖ ---
      await apiInstance.sendTransacEmail(sendSmtpEmail);
      res.json({ success: true });
    } catch (err) {
      console.error("Email send failed:", err);
      res.status(500).json({ error: "‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

app.post("/api/auth/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;
  if (!token || !newPassword) return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });

  const data = global.resetTokens?.get(token);
  if (!data) return res.status(400).json({ error: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
  if (Date.now() > data.expire) {
    global.resetTokens.delete(token);
    return res.status(400).json({ error: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
  }

  const hashed = await bcrypt.hash(newPassword, 12);
  try {
    await pool.query("UPDATE users SET password = $1 WHERE email = $2", [hashed, data.email]);
    global.resetTokens.delete(token);
    res.json({ success: true, message: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    res.status(500).json({ error: "Database error" });
  }
});
// === END OTP/Email setup ===

app.use(express.static(__dirname));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100
});
app.use(limiter);

// ------------ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: database schema ‡πÅ‡∏•‡∏∞‡πÅ‡∏≠‡∏î‡∏ü‡∏¥‡∏•‡∏î‡πå ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ (schema.sql, migration tools) ------------

// Authentication middleware - now uses JWT instead of userId as token
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.startsWith('Bearer ') ? authHeader.substring(7).trim() : null;

  if (token == null || token === '') {
    return res.status(401).json({ error: 'Access token required' });
  }

  // --- ‚òÖ‚òÖ‚òÖ ‡πÉ‡∏ä‡πâ jwt.verify --- ‚òÖ‚òÖ‚òÖ
  jwt.verify(token, process.env.JWT_SECRET, (err, userPayload) => {
    if (err) {
      console.log('Invalid token:', err.message);
      return res.status(401).json({ error: 'Invalid token' });
    }

    req.userId = userPayload.userId;
    req.user = userPayload; // ‡∏à‡∏∞ query db ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á demo ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà sign ‡∏°‡∏≤‡∏Å‡πá‡πÑ‡∏î‡πâ
    console.log('Authentication successful for user:', userPayload.email);
    next();
  });
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug token
app.get('/api/debug/auth', authenticateToken, (req, res) => {
  res.json({
    message: 'Token is valid',
    user: req.user,
    userId: req.userId
  });
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á authentication
app.get('/api/debug/token-check', (req, res) => {
  let authHeader = req.headers['authorization'];
  if (typeof authHeader !== 'string') authHeader = '';
  authHeader = authHeader.trim();

  let token = '';
  if (authHeader.length === 0) {
    token = '';
  } else if (/^Bearer\s+/i.test(authHeader)) {
    token = authHeader.replace(/^Bearer\s+/i, '').trim();
  } else {
    token = authHeader;
  }

  res.json({
    authHeader: authHeader,
    token: token,
    tokenType: typeof token,
    tokenLength: token ? token.length : 0
  });
});

// Routes
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'LoginIndex.htm'));
});

app.get('/main', (req, res) => {
  res.sendFile(path.join(__dirname, 'mainIndex.htm'));
});

// ----------- Auth Routes (PostgreSQL async/await style) --------------
app.post('/api/auth/register', async (req, res) => {
  const { email, password, name } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Email and password are required' });
  }

  try {
    const userRes = await pool.query('SELECT id FROM users WHERE email = $1', [email]);
    if (userRes.rows.length > 0) {
      return res.status(400).json({ error: 'User already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 12);

    const insertUserRes = await pool.query(
      'INSERT INTO users (email, password, name) VALUES ($1, $2, $3) RETURNING id',
      [email, hashedPassword, name]
    );
    const userId = insertUserRes.rows[0].id;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á default categories ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ô‡∏µ‡πâ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô slug ‡πÄ‡∏õ‡πá‡∏ô sing)
    const defaultCategories = [
      { name: '‡πÄ‡∏Å‡∏°', sing: 'game' },
      { name: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', sing: 'other' }
    ];

    for (const cat of defaultCategories) {
      try {
        await pool.query(
          'INSERT INTO categories (user_id, name, sing) VALUES ($1, $2, $3)',
          [userId, cat.name, cat.sing]
        );
      } catch (err) {
        console.error('Failed to create default category:', err);
        // ‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î signup ‡πÅ‡∏Ñ‡πà log (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      }
    }

    res.json({
      message: 'User created successfully',
      userId: userId
    });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Email and password are required' });
  }

  try {
    const userRes = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    const user = userRes.rows[0];
    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }

    // --- ‚òÖ‚òÖ‚òÖ sign JWT token ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚òÖ‚òÖ‚òÖ ---
    const token = jwt.sign(
      { userId: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.json({
      message: 'Login successful',
      token: token,
      user: {
        id: user.id,
        email: user.email,
        name: user.name
      }
    });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

/* ====================== Categories Routes + ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ======================== */

// ‡πÉ‡∏´‡∏°‡πà: app.get('/api/categories') ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö trashed
app.get('/api/categories', authenticateToken, async (req, res) => {
  const { trashed } = req.query;

  let query = 'SELECT id, name, sing as slug, deleted, deleted_at FROM categories WHERE user_id = $1';
  const params = [req.userId];

  if (trashed === '1') {
    query += ' AND deleted = true';
  } else {
    query += ' AND (deleted = false OR deleted IS NULL)';
  }

  query += ' ORDER BY name';

  try {
    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

app.post('/api/categories', authenticateToken, async (req, res) => {
  const { name } = req.body;

  if (!name) {
    return res.status(400).json({ error: 'Category name is required' });
  }

  const slug = name.trim()
    .toLowerCase()
    .replace(/[^a-z0-9‡∏Å-‡πô]+/g, '-')
    .replace(/^-+|-+$/g, '');

  try {
    const exists = await pool.query(
      'SELECT id FROM categories WHERE user_id = $1 AND sing = $2',
      [req.userId, slug]
    );
    if (exists.rows.length > 0) {
      return res.status(400).json({ error: 'Category already exists' });
    }

    const insertRes = await pool.query(
      'INSERT INTO categories (user_id, name, sing) VALUES ($1, $2, $3) RETURNING id',
      [req.userId, name, slug]
    );

    res.json({
      id: insertRes.rows[0].id,
      name: name,
      slug: slug,
      user_id: req.userId
    });
  } catch (err) {
    res.status(500).json({ error: 'Failed to create category' });
  }
});

// ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏õ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ (Soft Delete)
app.patch('/api/categories/:slug/trash', authenticateToken, async (req, res) => {
  const categorySlug = req.params.slug;
  try {
    const categoryRes = await pool.query(
      'SELECT id, name, sing FROM categories WHERE (sing = $1 OR name = $1) AND user_id = $2',
      [categorySlug, req.userId]
    );
    const category = categoryRes.rows[0];
    if (!category) {
      return res.status(404).json({ error: 'Category not found' });
    }

    // 2. ‡∏¢‡πâ‡∏≤‡∏¢ codes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
    const codesRes = await pool.query(
      `UPDATE codes SET deleted = true, deleted_at = CURRENT_TIMESTAMP 
       WHERE user_id = $1 AND category = $2`,
      [req.userId, category.sing]
    );
    const codesMoved = codesRes.rowCount;

    // 3. ‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏õ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ (Soft Delete)
    const catTrashRes = await pool.query(
      `UPDATE categories SET deleted = true, deleted_at = CURRENT_TIMESTAMP 
       WHERE id = $1 AND user_id = $2`,
      [category.id, req.userId]
    );

    res.json({
      message: 'Category and all related codes moved to trash',
      categoryMoved: catTrashRes.rowCount,
      codesMoved: codesMoved
    });
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
app.post('/api/categories/:slug/restore', authenticateToken, async (req, res) => {
  const categorySlug = req.params.slug;
  try {
    const categoryRes = await pool.query(
      'SELECT id, sing FROM categories WHERE (sing = $1 OR name = $1) AND user_id = $2 AND deleted = true',
      [categorySlug, req.userId]
    );
    const category = categoryRes.rows[0];
    if (!category) {
      return res.status(404).json({ error: 'Category not found in trash' });
    }

    const catRestoreRes = await pool.query(
      'UPDATE categories SET deleted = false, deleted_at = NULL WHERE id = $1 AND user_id = $2',
      [category.id, req.userId]
    );
    const codesRestoreRes = await pool.query(
      'UPDATE codes SET deleted = false, deleted_at = NULL WHERE user_id = $1 AND category = $2',
      [req.userId, category.sing]
    );
    res.json({
      message: 'Category restored successfully',
      codesRestored: codesRestoreRes.rowCount
    });
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ñ‡∏≤‡∏ß‡∏£
app.delete('/api/categories/:slug/force-delete', authenticateToken, async (req, res) => {
  const categorySlug = req.params.slug;
  try {
    const categoryRes = await pool.query(
      'SELECT id, sing FROM categories WHERE (sing = $1 OR name = $1) AND user_id = $2 AND deleted = true',
      [categorySlug, req.userId]
    );
    const category = categoryRes.rows[0];
    if (!category) {
      return res.status(404).json({ error: 'Category not found in trash' });
    }
    const codesDeleteRes = await pool.query(
      'DELETE FROM codes WHERE user_id = $1 AND category = $2 AND deleted = true',
      [req.userId, category.sing]
    );
    const codesDeleted = codesDeleteRes.rowCount;
    const catDeleteRes = await pool.query(
      'DELETE FROM categories WHERE id = $1 AND user_id = $2',
      [category.id, req.userId]
    );
    res.json({
      message: 'Category permanently deleted',
      categoryDeleted: catDeleteRes.rowCount,
      codesDeleted: codesDeleted
    });
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞
app.post('/api/categories/restore-all', authenticateToken, async (req, res) => {
  try {
    const catRestoreRes = await pool.query(
      'UPDATE categories SET deleted = false, deleted_at = NULL WHERE user_id = $1 AND deleted = true',
      [req.userId]
    );
    const categoriesRestored = catRestoreRes.rowCount;
    const codesRestoreRes = await pool.query(
      'UPDATE codes SET deleted = false, deleted_at = NULL WHERE user_id = $1 AND deleted = true',
      [req.userId]
    );
    res.json({
      message: 'All categories and codes restored',
      categoriesRestored: categoriesRestored,
      codesRestored: codesRestoreRes.rowCount
    });
  } catch (err) {
    res.status(500).json({ error: 'Failed to restore all categories' });
  }
});

// ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏ñ‡∏≤‡∏ß‡∏£
app.delete('/api/categories/force-delete-all', authenticateToken, async (req, res) => {
  try {
    const codesDeleteRes = await pool.query(
      'DELETE FROM codes WHERE user_id = $1 AND deleted = true',
      [req.userId]
    );
    const codesDeleted = codesDeleteRes.rowCount;
    const catDeleteRes = await pool.query(
      'DELETE FROM categories WHERE user_id = $1 AND deleted = true',
      [req.userId]
    );
    res.json({
      message: 'All trash permanently deleted',
      categoriesDeleted: catDeleteRes.rowCount,
      codesDeleted: codesDeleted
    });
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete all categories' });
  }
});

// ======= END ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà / ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà =======

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç route ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ slug/name ‡πÅ‡∏ó‡∏ô id (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
app.delete('/api/categories/:slug', authenticateToken, async (req, res) => {
  const categorySlug = req.params.slug;

  try {
    const catRes = await pool.query(
      'SELECT id, name, sing FROM categories WHERE (sing = $1 OR name = $1) AND user_id = $2',
      [categorySlug, req.userId]
    );
    const category = catRes.rows[0];
    if (!category) {
      return res.status(404).json({ error: 'Category not found' });
    }
    const codeUsingCatRes = await pool.query(
      'SELECT id FROM codes WHERE user_id = $1 AND category = $2 AND (deleted = false OR deleted IS NULL) LIMIT 1',
      [req.userId, category.sing]
    );
    const codeUsingCategory = codeUsingCatRes.rows[0];
    if (codeUsingCategory) {
      await pool.query(
        'UPDATE codes SET deleted = true, deleted_at = CURRENT_TIMESTAMP WHERE user_id = $1 AND category = $2',
        [req.userId, category.sing]
      );
      const catDeleteRes = await pool.query(
        'DELETE FROM categories WHERE id = $1 AND user_id = $2',
        [category.id, req.userId]
      );
      res.json({
        message: 'Category deleted successfully. All codes in this category have been moved to trash.',
        codesMovedToTrash: catDeleteRes.rowCount
      });
    } else {
      const catDeleteRes = await pool.query(
        'DELETE FROM categories WHERE id = $1 AND user_id = $2',
        [category.id, req.userId]
      );
      res.json({
        message: 'Category deleted successfully',
        categoryDeleted: catDeleteRes.rowCount
      });
    }
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡πÅ‡∏Ç‡πá‡∏á‡∏Ç‡∏±‡∏ô (‡∏•‡∏ö codes ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
app.delete('/api/categories/:slug/force', authenticateToken, async (req, res) => {
  const categorySlug = req.params.slug;
  try {
    const catRes = await pool.query(
      'SELECT id, sing FROM categories WHERE (sing = $1 OR name = $1) AND user_id = $2',
      [categorySlug, req.userId]
    );
    const category = catRes.rows[0];
    if (!category) {
      return res.status(404).json({ error: 'Category not found' });
    }
    const codesDeleteRes = await pool.query(
      'DELETE FROM codes WHERE user_id = $1 AND category = $2',
      [req.userId, category.sing]
    );
    const codesDeleted = codesDeleteRes.rowCount;
    const catDeleteRes = await pool.query(
      'DELETE FROM categories WHERE id = $1 AND user_id = $2',
      [category.id, req.userId]
    );
    res.json({
      message: 'Category and all related codes permanently deleted',
      categoryDeleted: catDeleteRes.rowCount,
      codesDeleted: codesDeleted
    });
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// ===== ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ API Routes =====

app.patch('/api/codes/:id/trash', authenticateToken, async (req, res) => {
  const codeId = req.params.id;
  try {
    const updateRes = await pool.query(
      'UPDATE codes SET deleted = true, deleted_at = CURRENT_TIMESTAMP WHERE id = $1 AND user_id = $2',
      [codeId, req.userId]
    );
    if (updateRes.rowCount === 0) {
      return res.status(404).json({ error: 'Code not found' });
    }
    res.json({ message: 'Code moved to trash' });
  } catch (err) {
    res.status(500).json({ error: 'Failed to trash code' });
  }
});

app.post('/api/codes/:id/restore', authenticateToken, async (req, res) => {
  const codeId = req.params.id;
  try {
    const restoreRes = await pool.query(
      'UPDATE codes SET deleted = false, deleted_at = NULL WHERE id = $1 AND user_id = $2',
      [codeId, req.userId]
    );
    if (restoreRes.rowCount === 0) {
      return res.status(404).json({ error: 'Code not found' });
    }
    res.json({ message: 'Code restored' });
  } catch (err) {
    res.status(500).json({ error: 'Failed to restore code' });
  }
});

app.delete('/api/codes/:id/force-delete', authenticateToken, async (req, res) => {
  const codeId = req.params.id;
  try {
    const delRes = await pool.query(
      'DELETE FROM codes WHERE id = $1 AND user_id = $2 AND deleted = true',
      [codeId, req.userId]
    );
    if (delRes.rowCount === 0) {
      return res.status(404).json({ error: 'Code not found in trash' });
    }
    res.json({ message: 'Code permanently deleted' });
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete permanently' });
  }
});

app.post('/api/codes/restore-all', authenticateToken, async (req, res) => {
  try {
    const resRestore = await pool.query(
      'UPDATE codes SET deleted = false, deleted_at = NULL WHERE user_id = $1 AND deleted = true',
      [req.userId]
    );
    res.json({ message: 'All codes restored', restored: resRestore.rowCount });
  } catch (err) {
    res.status(500).json({ error: 'Failed to restore all' });
  }
});

app.delete('/api/codes/force-delete-all', authenticateToken, async (req, res) => {
  try {
    const delRes = await pool.query(
      'DELETE FROM codes WHERE user_id = $1 AND deleted = true',
      [req.userId]
    );
    res.json({ message: 'All trash permanently deleted', deleted: delRes.rowCount });
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete all permanently' });
  }
});

app.get('/api/codes', authenticateToken, async (req, res) => {
  const { category, search, trashed } = req.query;
  let query = 'SELECT * FROM codes WHERE user_id = $1';
  const params = [req.userId];
  let paramIndex = 2;

  if (trashed === '1') {
    query += ' AND deleted = true';
  } else {
    query += ' AND (deleted = false OR deleted IS NULL)';
  }

  if (category && category !== 'all') {
    query += ` AND category = $${paramIndex++}`;
    params.push(category);
  }

  if (search) {
    query += ` AND (name ILIKE $${paramIndex} OR code ILIKE $${paramIndex + 1} OR description ILIKE $${paramIndex + 2})`;
    const searchTerm = `%${search}%`;
    params.push(searchTerm, searchTerm, searchTerm);
    paramIndex += 3;
  }

  query += ' ORDER BY created_at DESC';

  try {
    const result = await pool.query(query, params);
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// --- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç app.post('/api/codes') ‡πÅ‡∏•‡∏∞ app.put('/api/codes/:id') ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö sing ---

app.post('/api/codes', authenticateToken, async (req, res) => {
  const { name, code, description, category, expires_at } = req.body;

  if (!name || !code || !category) {
    return res.status(400).json({ error: 'Name, code and category are required' });
  }

  try {
    const catRes = await pool.query(
      'SELECT id FROM categories WHERE user_id = $1 AND sing = $2',
      [req.userId, category]
    );
    if (catRes.rows.length === 0) {
      return res.status(400).json({ error: 'Invalid category' });
    }

    const insertRes = await pool.query(
      `INSERT INTO codes (user_id, name, code, description, category, expires_at) 
       VALUES ($1, $2, $3, $4, $5, $6)
       RETURNING *`,
      [req.userId, name, code, description, category, expires_at]
    );

    res.json(insertRes.rows[0]);
  } catch (err) {
    res.status(500).json({ error: 'Failed to create code' });
  }
});

// UPDATED PUT /api/codes/:id (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö category ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÉ‡∏ä‡πâ sing)
app.put('/api/codes/:id', authenticateToken, async (req, res) => {
  const { name, code, description, expires_at, category } = req.body;
  const codeId = req.params.id;

  try {
    const catRes = await pool.query(
      'SELECT id FROM categories WHERE user_id = $1 AND sing = $2',
      [req.userId, category]
    );
    if (catRes.rows.length === 0) {
      return res.status(400).json({ error: 'Invalid category' });
    }

    const updateRes = await pool.query(
      `UPDATE codes SET name = $1, code = $2, description = $3, expires_at = $4, 
              category = $5, updated_at = CURRENT_TIMESTAMP 
              WHERE id = $6 AND user_id = $7`,
      [name, code, description, expires_at, category, codeId, req.userId]
    );

    if (updateRes.rowCount === 0) {
      return res.status(404).json({ error: 'Code not found' });
    }
    res.json({ message: 'Code updated successfully' });
  } catch (err) {
    res.status(500).json({ error: 'Failed to update code' });
  }
});

app.delete('/api/codes/:id', authenticateToken, async (req, res) => {
  const codeId = req.params.id;

  try {
    const foundRes = await pool.query(
      'SELECT id FROM codes WHERE id = $1 AND user_id = $2',
      [codeId, req.userId]
    );
    if (foundRes.rows.length === 0) {
      return res.status(404).json({ error: 'Code not found' });
    }

    const delRes = await pool.query(
      'DELETE FROM codes WHERE id = $1 AND user_id = $2',
      [codeId, req.userId]
    );
    if (delRes.rowCount === 0) {
      return res.status(404).json({ error: 'Code not found or already deleted' });
    }
    res.json({ message: 'Code deleted successfully' });
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete code' });
  }
});

// User profile route
app.get('/api/user/profile', authenticateToken, async (req, res) => {
  try {
    const userRes = await pool.query(
      'SELECT id, email, name, created_at FROM users WHERE id = $1',
      [req.userId]
    );
    const user = userRes.rows[0];
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json(user);
  } catch (err) {
    res.status(500).json({ error: 'Database error' });
  }
});

// Handle 404
app.use((req, res) => {
  res.status(404).sendFile(path.join(__dirname, 'LoginIndex.htm'));
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  console.log(`Login page: http://localhost:${PORT}/`);
  console.log(`Main page: http://localhost:${PORT}/main`);
});
